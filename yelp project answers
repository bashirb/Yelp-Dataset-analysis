sql
/* #############################################
Part 1: Yelp Dataset Profiling and Understanding
################################################ */

1. Profile the data by finding the total number of records for each of the tables below:

-- i. Attribute table = 10000
-- ii. Business table = 10000
-- iii. Category table = 10000
-- iv. Checkin table = 10000
-- v. elite_years table = 10000
-- vi. friend table =  10000
-- vii. hours table = 10000
-- viii. photo table = 10000
-- ix. review table = 10000
-- x. tip table = 10000
-- xi. user table = 10000


2. Find the total distinct records by either the foreign key or primary key for each table. 
-- If two foreign keys are listed in the table, please specify which foreign key.

-- i. Business = 10000
-- ii. Hours = 1562
-- iii. Category =2643
-- iv. Attribute = 1115
-- v. Review = 10000
            -- id = 10000
            -- business_id = 8090
            -- user_id = 9581

-- vi. Checkin = 493
-- vii. Photo = 10000
            -- id = 10000
            -- business_id = 6493
-- viii. Tip = 537
            -- user_id = 537
            -- business_id = 3979
-- ix. User = 10000
-- x. Friend = 11
-- xi. Elite_years = 2780



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

--	Answer: No

-- 	SQL code used to arrive at answer:
    Select column_name
    From user
    where column_name is null;


4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
    select city, sum(review_count) as num_reviews
    from business
    group by city
    order by num_reviews desc;
	
	Copy and Paste the Result Below:
	
+-----------------+-------------+
| city            | num_reviews |
+-----------------+-------------+
| Las Vegas       |       82854 |
| Phoenix         |       34503 |
| Toronto         |       24113 |
| Scottsdale      |       20614 |
| Charlotte       |       12523 |
| Henderson       |       10871 |
| Tempe           |       10504 |
| Pittsburgh      |        9798 |
| Montréal        |        9448 |
| Chandler        |        8112 |
| Mesa            |        6875 |
| Gilbert         |        6380 |
| Cleveland       |        5593 |
| Madison         |        5265 |
| Glendale        |        4406 |
| Mississauga     |        3814 |
| Edinburgh       |        2792 |
| Peoria          |        2624 |
| North Las Vegas |        2438 |
| Markham         |        2352 |
| Champaign       |        2029 |
| Stuttgart       |        1849 |
| Surprise        |        1520 |
| Lakewood        |        1465 |
| Goodyear        |        1155 |
+-----------------+-------------+
(Output limit exceeded, 25 of 362 total rows shown)



6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

select stars as star_rating, count(id) as star_count
from business
where city = "Avon"
group by stars
order by stars asc

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------------+------------+
| star_rating | star_count |
+-------------+------------+
|         1.5 |          1 |
|         2.5 |          2 |
|         3.5 |          3 |
|         4.0 |          2 |
|         4.5 |          1 |
|         5.0 |          1 |
+-------------+------------+

ii. Beachwood

SQL code used to arrive at answer:

select stars as star_rating, count(id) as star_count
from business
where city = "Beachwood"
group by stars
order by stars asc


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------------+------------+
| star_rating | star_count |
+-------------+------------+
|         2.0 |          1 |
|         2.5 |          1 |
|         3.0 |          2 |
|         3.5 |          2 |
|         4.0 |          1 |
|         4.5 |          2 |
|         5.0 |          5 |
+-------------+------------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
    select name, review_count
    from user
    order by review_count desc
    limit 3;
		
	Copy and Paste the Result Below:
	
    +--------+--------------+
    | name   | review_count |
    +--------+--------------+
    | Gerald |         2000 |
    | Sara   |         1629 |
    | Yuri   |         1339 |
    +--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
    There review counts values range from zero to 2000, to investigate, we split them into 20 equal parts each has 100 increments. 
    We can see in the table bellow that up to 700 reviews, more reviews correlated with more fans. Beyond 700 the pattern is not consistent, but on average the number of fans is higher. This could be due to the fact that most users write fewer reviews, so we could results statistically more accurate.
    In general, we can say that more reviews could lead to more fans.

    +-----------+---------------+--------------------+
    | num_users | reviews_given |       ave_num_fans |
    +-----------+---------------+--------------------+
    |      9492 | A.0-100       | 0.4367888748419722 |
    |       270 | B.101-200     |  8.933333333333334 |
    |       107 | C.201-300     | 18.523364485981308 |
    |        57 | D.301-400     | 25.210526315789473 |
    |        26 | E.401-500     |  31.76923076923077 |
    |        13 | F.501-600     |  32.84615384615385 |
    |        14 | G.601-700     |               76.0 |
    |         3 | H.701-800     |               58.0 |
    |         7 | I.801-900     |  97.57142857142857 |
    |         3 | J.901-1000    |              236.0 |
    |         1 | K.1001-1100   |              104.0 |
    |         2 | L.1101-1200   |              163.5 |
    |         2 | M.1201-1300   |              113.5 |
    |         1 | N.1301-1400   |               76.0 |
    |         1 | Q.1601-1700   |               50.0 |
    |         1 | T.1901-2000   |              253.0 |
    +-----------+---------------+--------------------+

    The code:

    SELECT 
    -- Grouping/Binning based on the number of reviews given
    count(id) as num_users,
    CASE 
        WHEN review_count BETWEEN 0 AND 100 THEN 'A.0-100'
        WHEN review_count > 100 AND review_count <= 200 THEN 'B.101-200'
        WHEN review_count > 200 AND review_count <= 300 THEN 'C.201-300'
        WHEN review_count > 300 AND review_count <= 400 THEN 'D.301-400'
        WHEN review_count > 400 AND review_count <= 500 THEN 'E.401-500'
        WHEN review_count > 500 AND review_count <= 600 THEN 'F.501-600'
        WHEN review_count > 600 AND review_count <= 700 THEN 'G.601-700'
        WHEN review_count > 700 AND review_count <= 800 THEN 'H.701-800'
        WHEN review_count > 800 AND review_count <= 900 THEN 'I.801-900'
        WHEN review_count > 900 AND review_count <= 1000 THEN 'J.901-1000'
        WHEN review_count > 1000 AND review_count <= 1100 THEN 'K.1001-1100'
        WHEN review_count > 1100 AND review_count <= 1200 THEN 'L.1101-1200'
        WHEN review_count > 1200 AND review_count <= 1300 THEN 'M.1201-1300'
        WHEN review_count > 1300 AND review_count <= 1400 THEN 'N.1301-1400'
        WHEN review_count > 1400 AND review_count <= 1500 THEN 'O.1401-1500'
        WHEN review_count > 1500 AND review_count <= 1600 THEN 'P.1501-1600'
        WHEN review_count > 1600 AND review_count <= 1700 THEN 'Q.1601-1700'
        WHEN review_count > 1700 AND review_count <= 1800 THEN 'R.1701-1800'
        WHEN review_count > 1800 AND review_count <= 1900 THEN 'S.1801-1900'
        WHEN review_count > 1900 AND review_count <= 2000 THEN 'T.1901-2000'
    END AS reviews_given,
    avg(fans) AS 'ave_num_fans'
FROM user
GROUP BY reviews_given
ORDER BY reviews_given ASC;



9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
    
    There are 1780 reviews with the word "love" and 232 reviews with the word "hate.
    So, more reviews have the word "love" than "hate"
	
	SQL code used to arrive at answer:
    
    for the word "love"
    select count(text) as num_reviews_love
    from review
    where text LIKE '%love%';

    for the word "hate"
    select count(text) as num_reviews_hate
    from review
    where text LIKE '%hate%';



10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
    select name , fans
    from user
    order by fans desc
    limit 10;
	
	Copy and Paste the Result Below:

    +-----------+------+
    | name      | fans |
    +-----------+------+
    | Amy       |  503 |
    | Mimi      |  497 |
    | Harald    |  311 |
    | Gerald    |  253 |
    | Christine |  173 |
    | Lisa      |  159 |
    | Cat       |  133 |
    | William   |  126 |
    | Fran      |  124 |
    | Lissa     |  120 |
    +-----------+------+


/* #############################################
Part 2: Yelp Dataset Inferences and Analysis
################################################ */

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?


ii. Do the two groups you chose to analyze have a different number of reviews?
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

